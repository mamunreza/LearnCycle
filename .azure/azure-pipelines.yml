name: $(BuildDefinitionName)_CI_$(Year:yyyy).$(Month).$(DayOfMonth).$(Rev:r)
trigger:
- master
- dev*
pr:
- master
- dev*

pool:
  vmImage: 'ubuntu-latest'

variables:
  packageVersion: '1.0.0.0'
  revision: $[counter('lc-revision', 0)]

jobs:    
- job: UnitTests
  displayName: Run unit tests
  steps:
  - task: CmdLine@2
    displayName: Run unit tests
    inputs:
        workingDirectory: './'
        failOnStderr: true
        script: |
            docker images -q --filter=reference="lc-test-build" | grep -q . && docker rmi lc_test_build
            docker ps -q --filter "name=lc_test_run" | grep -q . && docker stop lc_test_run && docker rm -fv lc_test_run
            docker build -t lc_test_build -f LearnCycle.FlatFileImporter/Dockerfile ./ --target lcbuild
            docker run --name lc_test_run lc_test_build dotnet test -c Release -l:"trx;" -r /app/TestResults
            docker rm lc_test_run
            docker rmi lc_test_build

# - job: Deployment
  # displayName: Build and push docker images
  # dependsOn: SpecflowTests 
  # condition: succeeded() # runs only if specflow tests are passing
  # steps:
  # - powershell: |
      # $path = 'src\cds-rest-api\SharedAssemblyInfo.cs'
      # $pattern = '\[assembly: AssemblyVersion\("(.*)"\)\]'
      # (Get-Content $path) | ForEach-Object{
        # if($_ -match $pattern){
            # $fileVersion = [version]$matches[1]
            # $newVersion = "{0}.{1}.{2}.{3}" -f $fileVersion.Major, $fileVersion.Minor, $fileVersion.Build, $(revision)
            # '[assembly: AssemblyVersion("{0}")]' -f $newVersion
        # } else {
            # # Output line as is
            # $_
        # }
      # } | Set-Content $path -Force
   
      # Write-Host $newVersion
      # Write-Host "##vso[task.setvariable variable=packageVersion]$newVersion"

  # - task: AzureKeyVault@1
    # displayName: Load secrets from afterpay-shared KeyVault
    # inputs:
        # azureSubscription: 'azurerm-afterpay-shared'
        # KeyVaultName: 'afterpay'
        # SecretsFilter: 'afterpay-container-registry-admin-username,afterpay-container-registry-admin-password,afterpay-container-registry-login-server'

  # - task: CmdLine@2
    # displayName: Build and push docker images
    # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    # env:
        # PACKAGE_VERSION: $(packageVersion)
        # LOGIN_USERNAME: $(afterpay-container-registry-admin-username)
        # LOGIN_PASSWORD: $(afterpay-container-registry-admin-password)
        # LOGIN_HOSTNAME: $(afterpay-container-registry-login-server)
    # inputs:
        # workingDirectory: 'src'
        # failOnStderr: false
        # script: |
            # :: push cds image
            # TAGGED_IMAGE="$LOGIN_HOSTNAME/cds-rest-api:$PACKAGE_VERSION"
            # echo "$LOGIN_PASSWORD" | docker login --username $LOGIN_USERNAME --password-stdin $LOGIN_HOSTNAME
            # docker build -t $TAGGED_IMAGE -f cds-rest-api/Dockerfile .
            # docker push $TAGGED_IMAGE
            # docker rmi $TAGGED_IMAGE
            
            # :: push specflow image
            # TAGGED_IMAGE="$LOGIN_HOSTNAME/cds-rest-api-tests:$PACKAGE_VERSION"
            # echo "$LOGIN_PASSWORD" | docker login --username $LOGIN_USERNAME --password-stdin $LOGIN_HOSTNAME
            # docker build -t $TAGGED_IMAGE -f AcceptanceTests/Dockerfile ../
            # docker push $TAGGED_IMAGE
            # docker rmi $TAGGED_IMAGE
            
            # :: push specflow allure image
            # TAGGED_IMAGE="$LOGIN_HOSTNAME/cds-rest-api-allure:latest"
            # echo "$LOGIN_PASSWORD" | docker login --username $LOGIN_USERNAME --password-stdin $LOGIN_HOSTNAME
            # docker build -t $TAGGED_IMAGE -f AcceptanceTests/Dockerfile.allure ../
            # docker push $TAGGED_IMAGE
            # docker rmi $TAGGED_IMAGE
           
